using FluentEmail.Core;
using MalwarebytesOneviewApi.Models;
using Microsoft.Extensions.Logging;
using Play.Application.Malwarebytes.Interfaces;
using Play.BackgroundJobs.Malwarebytes.Interfaces;
using Play.Domain.Core.Interfaces;

namespace Play.BackgroundJobs.Malwarebytes;

public class MbamReportWorker : IMbamReportWorker
{
    private readonly IEmailTemplateRepository _emailTemplateRepository;
    private readonly ILogger<MbamReportWorker> _logger;
    private readonly IFluentEmailFactory _mailer;
    private readonly IMalwarebytesDetectionService _malwarebytesDetectionService;
    private readonly IMalwarebytesSiteService _malwarebytesSiteService;

    public MbamReportWorker(IMalwarebytesDetectionService malwarebytesDetectionService,
        IMalwarebytesSiteService malwarebytesSiteService, IFluentEmailFactory mailer, ILogger<MbamReportWorker> logger,
        IEmailTemplateRepository emailTemplateRepository)
    {
        _malwarebytesDetectionService = malwarebytesDetectionService;
        _malwarebytesSiteService = malwarebytesSiteService;
        _mailer = mailer;
        _logger = logger;
        _emailTemplateRepository = emailTemplateRepository;
    }

    /// <summary>
    ///     This is a background service that retrieves a list of sites from the MalwarebytesSiteService and generates a list
    ///     of detections for each site from the MalwarebytesDetectionService.
    ///     It then filters the detections to include only those that have been reported in the past week.
    ///     The service then gets the company name and email address for each site from the retrieved list of sites and creates
    ///     a list of tuples containing the company name, email address,
    ///     and list of detections for each site. Next, the service retrieves an email template with the name "Weekly
    ///     Malwarebytes Report" from the EmailTemplateRepository
    ///     and removes any HTML comments from the template body. The service then sends an email to each site using the
    ///     FluentEmail Mailer with the subject and body of the email template,
    ///     and the name and list of detections for the site as dynamic template parameters. If any errors occur while the
    ///     background service is running,
    ///     they are logged using the logger with the message "Error in MbamReportWorker".
    /// </summary>
    /// <exception cref="Exception"></exception>
    public async Task DoWork()
    {
        try
        {
            var sites = await _malwarebytesSiteService.GetSitesAsync();
            var accountIds = sites.Select(x => x.AccountId).Distinct();
            var nameAndEmailAndDetections = new List<(string, string, List<MbamOneViewDetection>)>();
            foreach (var accountId in accountIds)
            {
                //get all detections for the account
                var detections =
                    await _malwarebytesDetectionService.GetDetectionsByAccountIdAsync(accountId.ToString());
                //if detections are found
                if (detections.Any())
                {
                    //get only the detections that are reported current week 
                    var currentWeekDetections =
                        detections.Where(x => x.ReportedAt >= DateTime.Now.AddDays(-7)).ToList();
                    //get current site
                    var site = sites.FirstOrDefault(x => x.AccountId == accountId);
                    //take from company name only name without VAT

                    //convert timezoneinfo of current Week Detections to UTC and remove +00:00

                    foreach (var detection in currentWeekDetections)
                    {
                        detection.ReportedAt = TimeZoneInfo.ConvertTime(detection.ReportedAt, TimeZoneInfo.Local);
                        detection.ReportedAt = DateTime.Parse(detection.ReportedAt.ToString("yyyy-MM-dd HH:mm:ss"));
                    }

                    var companyName = site.CompanyName.Split('_')[1];
                    nameAndEmailAndDetections.Add((companyName, site.Email, currentWeekDetections));
                }
            }

            //get the email template
            var templates = await _emailTemplateRepository.GetByNameAsync("Weekly Malwarebytes Report") ??
                            throw new Exception("Email template not found");
            var template = templates.FirstOrDefault();
            //replace template <!-- and --> with ""
            var templateBody = template.Body.Replace("<!--", "").Replace("-->", "");

            //send an email to each site with the detections
            foreach (var (name, email, count) in nameAndEmailAndDetections)
                await _mailer.Create().To(email)
                    .Subject(template.Subject)
                    .UsingTemplate(templateBody, new
                    {
                        Username = name,
                        Detections = count.Count,
                        DetectionsList = count
                    })
                    .SendAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error in MbamReportWorker");
        }
    }
}